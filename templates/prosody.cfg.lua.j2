-- {{ ansible_managed }}

{% if prosody_admins %}
    admins = { "{{ prosody_admins|join('", "') }}" }
{% else %}
    admins = {  }
{% endif %}

use_libevent = {{ prosody_use_libevent |bool | lower }};

{% if prosody_install_community_modules and ansible_os_family == 'RedHat' %}
    plugin_paths = { "{{ prosody_community_modules_directory }}" }
{% endif %}

modules_enabled = {
{% for module in prosody_modules_enabled %}
    "{{ module }}";
{% endfor %}
};

modules_disabled = {
{% for module in prosody_modules_disabled %}
    "{{ module }}";
{% endfor %}
};

allow_registration = {{ prosody_register.allow_registration | bool | lower }};
min_seconds_between_registrations = {{ prosody_register.min_seconds_between_registrations }};
registration_throttle_max = {{ prosody_register.throttle_max }};
registration_throttle_period =  {{ prosody_register.throttle_period }};

certificates = "/etc/prosody/certs"

pidfile = "/run/prosody/prosody.pid";

{% if prosody_http_host is defined %}
    http_host = "{{ prosody_http_host }}";
{% endif %}

{% if prosody_trusted_proxies is defined and prosody_trusted_proxies | length > 0 %}
   trusted_proxies = { {{ prosody_trusted_proxies }} };
{% endif %}

{% if prosody_https_domain is defined %}
    https_certificate = "certs/{{ prosody_https_domain }}.crt";
{% endif %}

{% if "limits" in prosody_modules_enabled and prosody_limits is defined %}
    limits = {
        c2s = {
            rate = "{{ prosody_limits.c2s.rate }}";
            burst = "{{ prosody_limits.c2s.burst }}";
        };
        s2sin = {
            rate = "{{ prosody_limits.s2sin.rate }}";
            burst = "{{ prosody_limits.s2sin.burst }}";
        };
}
{% endif %}

{% if "mam" in prosody_modules_enabled %}
    archive_expires_after = {{ prosody_mam.archive_expires_after }};
{% endif %}

ssl = {
    {% if prosody_ssl_protocol is defined %}
        protocol = "{{ prosody_ssl_protocol }}"
    {% endif %}
}

c2s_require_encryption = {{ "true" if prosody_c2s_require_encryption else "false" }}
s2s_secure_auth = {{ "true" if prosody_s2s_secure_auth else "false" }}

{% if prosody_s2s_insecure_allowed_domains %}
    s2s_insecure_domains = { "{{ prosody_s2s_insecure_allowed_domains|join('", "') }}" }
{% else %}
    -- s2s_insecure_domains = { "gmail.com" }
{% endif %}

{% if prosody_s2s_secure_required_domains %}
    s2s_secure_domains = { "{{ prosody_s2s_secure_required_domains|join('", "') }}" }
{% else %}
--s2s_secure_domains = { "jabber.org" }
{% endif %}

{% if prosody_c2s_ports %}
    c2s_ports = { "{{ prosody_c2s_ports|join('", "') }}" }
{% endif %}

{% if prosody_c2s_interfaces %}
    c2s_interfaces = { "{{ prosody_c2s_interfaces|join('", "') }}" }
{% endif %}

{% if prosody_c2s_timeout %}
    c2s_timeout = {{ prosody_c2s_timeout }};
{% endif %}

{% if prosody_s2s_ports %}
    s2s_ports = { "{{ prosody_s2s_ports|join('", "') }}" }
{% endif %}

{% if prosody_s2s_interfaces %}
    s2s_interfaces = { "{{ prosody_s2s_interfaces|join('", "') }}" }
{% endif %}

{% if prosody_s2s_timeout %}
    s2s_timeout =  {{ prosody_s2s_timeout}};
{% endif %}

{% if prosody_data_path != "/var/lib/prosody" %}
    data_path = "{{ prosody_data_path }}";
{% endif %}

authentication = "{{ prosody_authentication }}"

{% if prosody_authentication == "ldap" %}
    prosody_ldap_base = "{{ prosody_ldap.base }}"
    prosody_ldap_server = "{{ prosody_ldap.server }}"
    prosody_ldap_rootdn = "{{ prosody_ldap.rootdn }}"
    prosody_ldap_password = "{{ prosody_ldap.password }}"
    prosody_ldap_filter = "{{ prosody_ldap.filter }}"
    prosody_ldap_scope = "{{ prosody_ldap.scope }}"
    prosody_ldap_tls = "{{ prosody_ldap.tls }}"
    prosody_ldap_mode = "{{ prosody_ldap.mode }}"
    prosody_ldap_admins = "{{ prosody_ldap.admins }}"
{% endif %}

{% if prosody_storage == "internal" %}
    storage = "internal"
{% elif prosody_storage == "sqlite" %}
    storage = "sql"
    sql = { driver = "SQLite3", database = "prosody.sqlite" }
{% endif %}

log = {
    {{ prosody_log.info_level }} = "{{ prosody_log.info_dst }}";
    error = "{{ prosody_log.error_dst }}";
}

Include "conf.d/*.cfg.lua"
